// Auto-generated by bindgen from wireshark/epan/packet.h
pub mod packet;
use crate::wireshark::packet::proto_item;
use crate::wireshark::packet::wmem_allocator_t;

// Contains functions from wireshark that are not exported automatically
mod ffi;
pub use ffi::{proto_tree, tcp_analysis, tvbuff_t};

use failure::Error;
use libc::{c_char, c_int, c_uint};
use std::convert::{TryFrom, TryInto};
use std::net::IpAddr;
use std::slice::from_raw_parts;

mod error;
use error::{CannotReadIPv4BytesError, CannotReadIPv6BytesError, UnexpectedAddressTypeError};

impl TryFrom<packet::address> for IpAddr {
    type Error = failure::Error;

    fn try_from(addr: packet::address) -> Result<Self, Self::Error> {
        let to_ip4 = || {
            let slice = unsafe { std::slice::from_raw_parts(addr.data as *const u8, 4) };
            let arr: [u8; 4] = slice.try_into().or(Err(CannotReadIPv6BytesError))?;
            Ok(IpAddr::from(arr))
        };
        let to_ip6 = || {
            let slice = unsafe { std::slice::from_raw_parts(addr.data as *const u8, 16) };
            let arr: [u8; 16] = slice.try_into().or(Err(CannotReadIPv6BytesError))?;
            Ok(IpAddr::from(arr))
        };
        match addr.type_ {
            address_type_AT_IPv4 => to_ip4(),
            address_type_AT_IPv6 => to_ip6(),
            _ => Err(UnexpectedAddressTypeError)?,
        }
    }
}

pub(crate) fn tvb_get_guint8(tvb: *mut tvbuff_t, offset: c_int /* gint */) -> u8 {
    unsafe { ffi::tvb_get_guint8(tvb, offset) }
}

pub(crate) fn tvb_captured_length(tvb: *mut tvbuff_t) -> c_uint {
    unsafe { ffi::tvb_captured_length(tvb) }
}

pub(crate) fn tvb_captured_length_remaining(tvb: *mut tvbuff_t) -> c_uint {
    unsafe { ffi::tvb_captured_length_remaining(tvb) }
}

pub(crate) fn proto_tree_add_int64(
    proto_tree: *mut proto_tree,
    hfindex: c_int,
    tvb: *mut tvbuff_t,
    start: c_int,
    length: c_int,
    value: i64,
) -> *mut proto_item {
    unsafe { ffi::proto_tree_add_int64(proto_tree, hfindex, tvb, start, length, value) }
}

pub(crate) fn proto_tree_add_item(
    proto_tree: *mut proto_tree,
    hfindex: c_int,
    tvb: *mut tvbuff_t,
    start: c_int,
    length: c_int,
    encoding: c_uint,
) {
    unsafe {
        let mut str: *const u8 = std::ptr::null_mut();
        let mut len: c_uint = 0;

        ffi::proto_tree_add_item_ret_string_and_length(
            proto_tree,
            hfindex,
            tvb,
            start,
            length,
            encoding,
            ffi::wmem_packet_scope(),
            &mut str,
            &mut len,
        );
    }
}

pub(crate) fn proto_tree_add_string(
    proto_tree: *mut proto_tree,
    hfindex: c_int,
    tvb: *mut tvbuff_t,
    start: c_int,
    length: c_int,
    value: String,
) {
    unsafe {
        let bytes_num = value.len();
        let b = value.as_bytes();

        ffi::proto_tree_add_string_format_value(
            proto_tree,
            hfindex,
            tvb,
            start,
            length,
            b.as_ptr() as *const c_char,
            b"%.*s\0".as_ptr() as *const c_char,
            bytes_num as c_int,
            b.as_ptr() as *const c_char,
        );
    }
}

pub(crate) fn get_data<'a>(tvb: *mut tvbuff_t) -> &'a [u8] {
    unsafe {
        let ptr = ffi::tvb_get_ptr(tvb, 0, -1);
        let ulen = ffi::tvb_captured_length_remaining(tvb);
        // According to Wireshark documentation:
        //   https://www.wireshark.org/docs/wsar_html/group__tvbuff.html#ga31ba5c32b147f1f1e57dc8326e6fdc21
        // `get_raw_ptr()` should not be used, but it looks as easiest solution here.
        std::slice::from_raw_parts(ptr, ulen as usize)
    }
}
